


/*Todo los elementos que empiezen en su nombre de clase
con la palabra Box y algo más aplica estos estilos*/

[class^="box"]{
    margin: 3rem auto; /*y... automático a los lados*/ 
    background-color: orangered;
}

/*como no se visualiza vamos a darle una anchura y una altura fija*/
.box{
width: 300px;
height: 300px;
}

/*si yo hago mas pequeña la pantalla,  por debajo de 300px pues crea 
un scroll horizontal. pero no haci en version para mobil
*/

/*¿Que seria una caja flexible?*/
/*es aquella donde las dimenciones de ancho y alto las vamos a definir (no
con unidades absolutas) sino con unidades relativas*/

.box-flexible{
    width: 50%; /*hace referencia al contenedor padre, en este caso el Article*/
    height: 20vh; /*si voy a dar dar altura en porcentajes el contenedor padre tiene que 
    tener perfectamente definida el tamaño de la altura expresado en una unidad de medida absoluta, por que sino los
    porcentajes no van a servir*/
}

/*en lugar de definir una anchura  y una altura base podriamos definir puntos máximos
 y puntos mínimos*/
.box-flexible-2{
    max-width: 960px;
    min-width: 280px;
    max-height: 480px; /*la altura siempre va depender del contenido*/
    min-height: 280px;
}


.box-flexible-3{
    max-width: 960px;
    min-width: 280px;
    max-height: 480px;
    min-height: 280px;
    width: 300px; /*tiene major jerarquia sobre maximo y minimos*/
    height: 300px; /*tiene major jerarquia sobre maximo y minimos*/
}

/*que  pasa si lo hago en unidades relativas*/

.box-flexible-4{
    max-width: 960px;
    min-width: 280px;
    max-height: 480px;
    min-height: 280px;
    width: 50%; /*tiene major jerarquia sobre maximo y minimos*/
    height: 20vh; /*tiene major jerarquia sobre maximo y minimos*/
}

/*la tecnica mas sencilla para trabajar elementos multimedia*/

img,
video,
iframe{
    max-width: 100%;
    height: auto;
}


/*esta es una tecnica vieja*/
.responsive-media{
    position: relative;
    max-width: 100%;
    height: 0;
    /*
        Formato widescreen 16:9
        16 ------> 100%
        9 -------> 56.25%
    */
    padding-bottom: 56.25%;
}

.responsive-media > *{
    position: absolute; /*su elemento padre es un position:relative, se posiciona respecto de
    su contenedor padre*/
    width: 100%;
    height: 100%;
}

/*la nueva forma de hacer responsivo*/

.aspect-ratio-16-9{
    aspect-ratio: 16 / 9;
    aspect-ratio: 4 / 3;
    aspect-ratio: 16 / 9; /*es como definir el ancho y alto en proporcion
    */
}


/*es una forma mas apropiada de aplicar responsividad 
a nuestros videos y documentos multimedia
*/
.aspect-ratio-16-9{
background-color: rebeccapurple;
aspect-ratio: 16 / 9;
aspect-ratio: 1 / 1;
aspect-ratio: 16 / 9;
}

.aspect-ratio-1-1{
    aspect-ratio: 1/1;
}

/*por cascada vamos a reemplazar*/

@media print{
    @page{
        size: A6 landscape;/*no hizo caso*/
        /*hay ciertos tamaños que aplican con ciertas orientaciones*/
        size: A5 landscape;
    }
    body{
        font-size: 10pt;
        font-family: sans-serif;
        background-color: #000; /*por alguna razon el color de fondo no hace efecto.*/
        color: greenyellow;
    }
}


/*media query para bajar animación*/



@media screen and (prefers-reduced-motion: reduce){

    /*REDUCE en mis configuraciones no tengo el valor de REDUCE */
    html{
        scroll-behavior: auto;
        scroll-behavior: smooth;
    }
}



@media screen and (prefers-reduced-motion: no-preference){

    /*REDUCE en mis configuraciones no tengo el valor de REDUCE */
    html{
        scroll-behavior: auto;
        scroll-behavior: smooth;
    }
}


/*como mi sistema operativo lo tengo en modo dark
esta media query toma eso como referencia y aplica los 
estilos

cuado al sistema operativo le das a entender que prefieres el 
modo dark(oscuro) esté configura las aplicaciones en modo oscuro por defecto

*/
@media screen and (prefers-color-scheme:dark){
    html{
        background-color: black;
        color: cyan;
    }
}


@media screen and (prefers-color-scheme:light){
    html{
        background-color: white;
        color: darkblue;
    }
}


/*Como mi sistema operativo tiene seleccionado el modo oscuro
pues obiamente estas preferencias de color  anque estan definidas despues del
DARK pues simplemente no están obedeciendo por que predomina
el */
@media screen and (prefers-color-scheme:no-preference){
    html{
        background-color: white;
        color: darkred;
    }

}

/*¿Como reestablesco los colores?*/
@media screen and (prefers-color-scheme:dark){
    html{
        background-color: white;
        color: black;
    }
}


/*Media querys que afectan el tamaño de la pantalla*/
/*generalmente las media querys con la que vamos a trabajar  en min width aplica
para cuando nostros estamos haciendo un diseño pensando primero en el mobil*/

/* En MOBILE FIRST se usa min-width que significa lo mínimo, del valor que des
 hacia arriba*/
@media screen and (min-width:480px){
    html{
        background-color: lightpink;
    }
}

/* En DESKTOP FIRST se usa max-width que significa lo máximo, del valor que des
 hacia abajo*/

 /*predomina esta media query por cascada*/
 @media screen and (max-width:1024px){
    html{
        background-color: lightgreen;
    }
}

/*Regresamos a los colores principales*/
@media screen and (min-width:1200px){
    html{
        background-color: white;
    }
}

/*Feature queries*/

@supports (grid-template-columns: subgrid){
    html{
        background-color: black;
        color: greenyellow;    
    }
}

/*Las media querys y las Feacture Queries nos permiten trabajar 
    con los operadores lógicos(and, or, not)
*/

@supports not (grid-template-columns: subgrid){
    html{
        background-color: darkgoldenrod;
        color: white;    
    }
}

/*Antes se utilizaba librerias como Modernicer librerias de javascript
para dar esta retrocompatibilidad a ciertar propiedades de CSS*/

/*Las 2 condiciones debes ser verdaderas*/

@supports (display: grid) and (grid-template-columns: subgrid){
    html{
        background-color: darkslateblue;
        color: lightseagreen;
    }
}


/*Condicional OR, por lo menos una debe ser verdadero*/
@supports (display: grid) or (grid-template-columns: subgrid){
    html{
        background-color: white;
        color: black;
    }
}

.card{
    border: thin solid #000;
    margin-left: auto; /*para que se centre*/
    margin-right: auto;
    max-width: 800px;
    /*container: layout style; /*acvivamos las caracteristicas de conteiner queries*/
     container-type: inline-size;
    container-name: sidebar;
    /* contain: layout; */
    /* contain: size; */
    /* contain: inline-size; */
     /* contain: layout; */
    /* contain: style; */
}

.card-image{
    max-width: 100%;
    height: auto;
    object-fit: cover;
    object-position: 0 50%; /*para que empieze en el eje horizontal,  y al mitad en el eje vertical*/

}

.card-content{
    padding: 1rem;
}

/*lo que yo quiero es que a cierto tamaño del componenete se vuelva en horizontal*/

/* que la parte de texto vaya en una sola fila con la imagen de la card*/

/*para activar lo de container queries al componente padre .card  hay que 
    activarle la propiedad contain: layout...
*/

/*chrome://flags/ */

@container (min-width: 600px){ /*cuando la targeta tenga de 600px en adelante*/
    .card-container{
        display: flex;
    }
}

@container (min-width: 600px) {
    .card-container {
        display: flex;
        /* Otros estilos que desees aplicar */
    }
}


/* .card {
    /* Especifica valores válidos para la propiedad "contain" */
   /* contain: layout style;
  } */
  
  @container sidebar (min-width: 600px) {
    .card-container {
      display: flex;
    }
    .card-container > *{
        width: 50%;
        flex-basis: 50%;
    }
  }
  
  /*Grid Fluida*/

  .fluid-grid{
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    /*¿Por que no estoy especificando filas por que las filas se van a generar dinamicamente?*/

}

.fluid-item{
    border: thin solid gray;
    padding: 1rem;
}

/*Texto fluido*/

/* @link https://utopia.fyi/type/calculator?c=320,18,1.2,1240,20,1.25,5,2,&s=0.75|0.5|0.25,1.5|2|3|4|6,s-l&g=s,l,xl,12 */

:root {
    --step--2: clamp(0.7813rem, 0.7747rem + 0.0326vi, 0.8rem);
    --step--1: clamp(0.9375rem, 0.9158rem + 0.1087vi, 1rem);
    --step-0: clamp(1.125rem, 1.0815rem + 0.2174vi, 1.25rem);
    --step-1: clamp(1.35rem, 1.2761rem + 0.3696vi, 1.5625rem);
    --step-2: clamp(1.62rem, 1.5041rem + 0.5793vi, 1.9531rem);
    --step-3: clamp(1.944rem, 1.771rem + 0.8651vi, 2.4414rem);
    --step-4: clamp(2.3328rem, 2.0827rem + 1.2504vi, 3.0518rem);
    --step-5: clamp(2.7994rem, 2.4462rem + 1.7658vi, 3.8147rem);
  }


.step--2 {
    font-size: var(--step--2);
}

.step--1 {
    font-size: var(--step--1);
}

/* podria ser para h6*/
.step-0 {
    font-size: var(--step-0);
}
/* podria ser para h5*/
.step-1 {
    font-size: var(--step-1);
}
.step-2 {
    font-size: var(--step-2);
}
.step-3 {
    font-size: var(--step-3);
}
.step-4 {
    font-size: var(--step-4);
}
/* podria ser para h1*/
.step-5 {
    font-size: var(--step-5);
}

/*pueden generár más si ustedes asi lo desean */

body{
/*
    14 = tamaño de letra mas pequeño
    18 = tamaño de letra mas grande
    1400 = tamaño de viewport más grande
    300 = tamaño de viewport más pequeño (al tamaño de pantalla que tu texto ya va dejar de fluir)  
*/
font-size: calc(14px + (18 - 14) * ((100vw - 300px)/(1400 - 300)));
/* font-size: calc(12px + (24-12)*((100vw - 300px)/(1600 - 200))); */
}

/*Contenedores Fluidos*/

/* .box-fluid{
    width: 300px;
    height: 300px;
} */

.box-fluid{
    width: clamp(400px, 60vw, 600px);
    height: clamp(200px, 30vh, 300px);
}

