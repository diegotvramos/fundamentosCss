/*Aplicamos el reseteo*/
html{
    box-sizing: border-box;
    font-size: 16px;
    font-family: sans-serif;
    
}

*,
*::after,
*::before{
    box-sizing: inherit;
}

.box{
    border: thick solid black; /*short hands*/
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 5rem;
    width: 200px;
    height: 200px;
}

.card{
    border: thick solid black;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 5rem;
    width: 600px;
    height: 400px;
}

.card img{
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: 40% 50%;
}


/*Transiciones HAY varias propiedades:
transition-property
transition-duration
transition-timing-function:none, linear, ease, ease-in, ease-out, ease-in-out steps
transition-delay
transition: property duration timing-function delay
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties
*/
.transitions .box{
    background-color: magenta;
    border-color: green;
    transition-property: background-color; /*propiedad que quiero modificar*/
    transition-duration: 500ms;
    transition-timing-function: ease;
    transition-delay: 0.5s;
    transition: border-color 2s linear 1s; /*El short hand reemplaza todo lo anterior definido.*/
    transition: all 2s ease-in-out 250ms;
    transition: background-color 2s ease-in-out 250ms, /*se activa al momento de recargar el navegador*/
                border-color 2s ease-in-out 250ms,
                border-radius 2s ease-in-out 250ms ;
}

/*Para ver las transiciones es importante definir un estado hover*/

.transitions .box:hover{
    background-color: cyan;
    border-color: red;
    border-radius: 2rem;
    border-style: dashed; /*Esta propiedad no es animable*/
}

.transitions .card{
    /* transition: all 2s ease; */ /*para evitar que la transicion sea súbita*/
    transition: opacity 1s ease-out,
        border-color 3s steps(3),/*Sigue 3 pasos*/
        filter 2s ease-in 1s,/*delay un segundo*/
        box-shadow 1.5s linear 2s; 
}


.transitions .card:hover{
    opacity: 0.75;
    border-color: orchid;
    filter: blur(0.15rem);
    box-shadow: 1rem 1rem 2rem 0.5rem #000;
}

.transitions .card img{
    transition: object-position 2s ease-in-out 3s;
}

.transitions .card img:hover{
    object-position: 100% 50%;
}


/*Transfomacion en 2D*/
.transform-2d img{
    transition: transform 2s ease-in-out; /*voy aplicar una transicion a la propiedad transform que dure 2s y que sea con un efecto de aceleracion ease-in-out*/
}

.transform-2d img:hover{
    transform: none;
    transform: translateX(4rem);
    transform: translateY(4rem);
    transform: translateY(-4rem);
    /* transform: translateY(-4rem); */
    transform: translate(-4rem, 4rem); /*Short hands el primer valor es para X y el segundo valor es para Y*/
    transform: translate(50%, 50%); /*tomaria como referencia el tamaño del objeto*/
    transform: translate(50%, 100px);
    /*Escala lo agranda a un lado*/
    transform: scaleX(2);
    transform: scaleY(.5);
    transform: scaleZ(1.5); /*no se va ver por que Z es el eje de profundidad*/
    transform: scale(1.5, 1.5);/*Short handed  X Y*/
    transform: scale(-1, -1); /*invierte la imagen*/
    /*Rotar una imagen*/
    transform: rotateX(90deg); /*el valor tiene que ser en grados, radianes  la rotacion en X es una transformacion en 3 dimenciones para poderla a preciar correctamente*/
    transform: rotateY(60deg);
    transform: rotateY(90deg);/*hace que la imagen se desaparesca por que solo se ve su lado*/
    transform: rotateZ(60deg);/*va en sentido de las manezillas del reloj*/
    transform: rotateZ(-60deg);
    transform: rotateZ(360deg);
    transform: rotate(360);/*SHORT HANDED trabaja en función a Z*/
    /*Sesgar*/
    transform: skewX(20deg);
    transform: skewY(20deg);
    transform: skewY(20deg);
    transform: skew(20deg, 20deg); /*El primer valor es para X y el segundo valor es para Y*/



    /*matrix(scaleX(), skewY(), skewX(), scaleY(), traslateX(), traslateY())*/

    transform: matrix(1,2,2,1,20,10); /*tiene que ver con cálculos matemáticos*/
    transform: matrix(1, 2, -1, 1, 80, 80);

    /*Transformaciones 2D Múltiples son separados por espacios en blanco y en el orden que quieres ejecutar las transformaciones*/
    transform: translate(25%, -50%);
    transform: translate(25%, -50%) rotate(240deg) skew(10deg, 20deg) scale(-0.5, -0.5);
}


/*TRANSFORMACIONES EN 3D*/
.transform-3d{
    perspective: 10rem;
}

.transform-3d img{
    transition: transform 2s ease-in-out;
}

.transform-3d img:hover{
    transform: translateZ(4rem);
    transform: perspective(1000px) translateZ(4rem);
    transform: perspective(100rem) translateZ(4rem);
    transform: perspective(1rem) translateZ(4rem);
    transform: translateZ(4rem);
    transform: translateZ(-4rem);

    transform: translate3d(2rem, 50%, -3rem);
    transform: scaleZ(1.5); /*la imagen no tiene volumen asi que no se puede apreciar estos cambios*/
    transform: scale3d(2, 0.5, 3);
    transform: rotateX(60deg);
    transform: rotateX(90deg);
    transform: rotateY(60deg);
    transform: rotateY(-90deg);
    transform: rotate3d(1,1,1,45deg);/*hace referencia a nodos vectoriales en cada uno de los ejes de la perspectiva 3d*/
    transform: rotate3d(1,0.5,0,-45deg);/*X, Y, Z y un angulo de inclinacion*/
    transform: rotate3d(-1,2.5,-2,60deg);
    /*matriz de 4*4*/
    transform: matrix3d(1,0,0,0,0,1,6,0,0,0,1,0,50,100,0,1.1);

    /*Transformaciones múltiples*/
    transform: rotate3d(-1, 2.5, -2, 60deg);
    transform: rotate3d(-1, 2.5, -2, 60deg) translate3d(2rem, 50%, -3rem) scale3d(2, -0.5, 3);
}


/*Punto de Origen*/
.transform-origin img{
    transition: transform 2s ease-in-out;
    /*transform-origin:x y z; /*Puede recibir hasta 3 valores*/
    transform-origin: 50% 50% 0;
    transform-origin: 0 0;
    transform-origin: 0;/*si solo das un valor aplica para X y Y*/
    transform-origin: top left;
    transform-origin: top right;
    transform-origin: top center;
    transform-origin: bottom center;
    transform-origin: bottom left;
    transform-origin: bottom right;
    transform-origin: center right;
    transform-origin: center left; /*Recuerda! el primer valor es para el eje X y el segundo valor es para el eje Y*/
    transform-origin: center center;
    transform-origin: -2rem -3rem;/*Tambien prodiamos darle valores como: rems, px, %*/
    transform-origin: 2rem 3rem;
    transform-origin: 25% 75%;
    transform-origin: -5% -5%;
    transform-origin: 30%; /*Y sigue girando en su mismo centro*/
    transform-origin: 30% 90%;
}

.transform-origin img:hover{
    transform: rotate(360deg);
}


/*Flip cards*/

.flip-card-1,
.flip-card-2{
    border: thick solid black;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 5rem;
    width: 600px;
    height: 400px;


    position: relative;
    cursor: pointer;
    transition: transform 1s ease-in-out;
    perspective: 10rem;
     /*  si lo hijos de un elemento tienen perspectiva en tres dimenciones, 
     establece el comportamiento en el espacio 3d,
      el valor por defecto es FLAT
      es decir que sobre el mismo plano trabaje los elementos hijos pero si nosotros queremos que los hijos
      de manera independiente tengan su propia perspectiva adicional a la del padre entonces debemos activar 
      una propieda que se llama: preserve-3d*/
      transform-style:flat ;
      transform-style: preserve-3d ; /*Hace que los elementos hijos tengan su perspectiva independiente eso significa que a las Flip face ya ahorita puedo darles una transformacion en 3d entonces ya se acoplarian*/
}


.flip-card-2{
    transform-origin: center right;
}


.flip-card-1:hover{
    transform: rotateY(180deg);
}

.flip-card-2:hover{
    transform: translateX(-100%) rotateY(-180deg);
}


.flip-card-1 img,
.flip-card-2 img{
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: 55% 45%;
}


.flip-face{
    position: absolute; /*Como no encuentra un contenedor padre relativo se va posicionar respecto del body le agregamos la propiedad relative al padre*/
    width: 100%;
    height: 100%;
    backface-visibility: visible;/*Este es el valor por defecto*/
    backface-visibility: hidden; /*Esta propiedad no tiene efectos sobre transformaciones en dos dimenciones eso significa que necesitamos al prespectiva activada*/
}

.flip-front{
    transform: rotateY(0deg);   
}

.flip-back{
    transform: rotateY(180deg);
}
/*Animaciones*/
@keyframes myAwesomeAnimation { /*seria la linea de tiempo*/
    /*debemos poner el fotograma inicial
    Y podemos meter tantas propiedades como querramos pero hay un link donde nos muestra las 
    propiedades que no son animables
    */
    from {
        opacity: 0;
        transform: translateX(0);
    }
    to {
        opacity: 1;
        transform: translateX(100%);
    }
}
.my-animation{
    /*animation: name duration timing-function delay iteration-count direction fill-mode play-state; /*estas son toda las propiedades que existen de la animacion*/
    /*de estas 8 propiedades las mas importantes son NAME y animacion. las otras son opcionales*/

    /*OBLIGATORIAS*/
    animation-name: myAwesomeAnimation;
    animation-duration: 3s;
    animation-duration: 2s;
    /*Aceleracion*/
    animation-timing-function: cubic-bezier(1,0,0,1);
    animation-timing-function: cubic-bezier(.73,0,.95,.29);
    animation-timing-function: ease-in-out;
    /*Retraso que va tener tu animacion*/
    animation-delay: 1500ms;
    animation-delay: 0ms;
    /* número de veces que se hará la animación*/
    
    animation-iteration-count: 3;
    animation-iteration-count: infinite;
    animation-iteration-count: 1;
    /*direccion*/
    animation-direction: normal;
    animation-direction: reverse;
    animation-direction: alternate; /*hace la animacion del punto inicial al punto final y regresa del punto final al punto inicial*/
    animation-direction: alternate-reverse;
    animation-direction: normal;
    /*Al final de la animacion se queda con los estílos finales de la animacion
        Cuando tengan la necesidad de que un elemento se quede con los estilos que definieron en el último fotograma de la animacion    
    */
    animation-fill-mode: none; /*por defecto*/
    animation-fill-mode: forwards;
    /* Al inicio de la animacion se queda con los estilos iniciales de la animacion */
    animation-fill-mode: backwards; /*evita los saltos viusales*/

    /*si quieres tener las ventajas del forwards y del backwards
    
    both aplica al mismo tiempo el valor de fowards y backwards
    */ 
    animation-fill-mode: both; /*conserva los estilos de inicio y de final de la animacion*/
    animation-play-state: running ;/*por defecto*/
    animation-play-state: paused;/*no tiene sentido en css pero si tiene sentido en javaScript*/
    animation-play-state: running;

    /*En el shorthand animation podria utilizar toda las propiedades*/
    animation: myAwesomeAnimation 1.5s ease 250ms 7 alternate both running;
    animation: myAwesomeAnimation 1s;
}


/*En caso de que tengas fotogramas claves intermedios, la linea de tiempo lo debes ver como porcentajes de 0  a 100(el fotograma final)*/
@keyframes myAwesomeAnimation2 {
    /* from{

    }
    to{

    } */

    /*SUMADOS harian 101 fotogramas clave*/
    0%{
        opacity: 0;
        
    }
    50%{
        opacity: 0.5;
        transform: translateX(-50%);
    }

    75%{
        transform: translateX(-75%);
    }
    100%{
        opacity: 1;
        transform: translateX(100%);
    }
}

.my-animation-2{
    animation: myAwesomeAnimation2 2s;
    animation: myAwesomeAnimation2 5s;
    animation: myAwesomeAnimation2 1s;
    animation: myAwesomeAnimation2 6s; /*a mayor tiempo tenga tu animacion mas lenta se pondrá*/
}


@keyframes multipleAnimation1 {
    0%{
        opacity: 1;
        
    }
    50%{
        opacity: 0;
    }

    100%{
        opacity: 1;
    }
}


@keyframes multipleAnimation2 {
    0%{
        transform: translateY(0);
        
    }
    50%{
        transform: translateY(-100%);
    }

    100%{
        transform: translateY(0);
    }
}



.animation-multiple{
    animation: multipleAnimation1 2s infinite;
    animation: multipleAnimation2 2s infinite;
    /*Por cascada está reemplazando las animaciones.  Cuando querramos multiples animaciones  es hacer lo siguiente*/
    animation: multipleAnimation1 2s infinite,
                multipleAnimation2 1s 3 ease-in-out;

}


.motion-examples{
    text-align: center;

}

@keyframes fadeIn {
    0%{
        opacity: 0;
        
    }
    100%{
        opacity: 1;
    }
}

.fade-in{
    font-size: 5vw;
    animation: fadeIn 2s linear 2s infinite alternate both; /*el nombre de la animacion es "fadeIn" que dure 2 segundos que sea con una aceleracion lineal */
}

@keyframes fadeOut {
    0%{
        opacity: 1;
        
    }
    100%{
        opacity: 0;
    }
}

.fade-out{
    font-size: 5vw;
    animation: fadeOut 2s linear 2s infinite alternate both; /*el nombre de la animacion es "fadeIn" que dure 2 segundos que sea con una aceleracion lineal */
}


@keyframes shake{
    10%, 90%{
        transform: translate(-1px, 0);
    }


    20%, 80%{
        transform: translate(2px, 0);
    }
    
    30%,
    50%,
    70%{
        transform: translate(-4px, 0);
    }

    40%,
    60%{
        transform: translate(4px, 0);
    }
}


.shake{
    font-size: 5vw;
    cursor: pointer;
    display: inline-block;
}

.shake:hover{
    animation: shake 1s cubic-bezier(.36 , 0.07, 0.19, 0.97) both;
    transform: translate(0,0);
}


@keyframes pulse{
    0%{
        transform: scale(1.1);
    }
    50%{
        transform: scale(0.8);
    }
    100%{
        transform: scale(1);
    }
}

.pulse{
    font-size: 5vw;
    animation: pulse 1s linear infinite;
}

/*♥*/

@keyframes heartColor {
    10%{
        background-color: #d00;
    }
}
.heart{
    position: relative;
    margin-left: auto;
    margin-right: auto;
    width: 10vw;
    height: 10vw; /*quiero un cuadrado por eso uso las unidades del VW*/
    /* background-color: #888 ; */
    animation: pulse 1s infinite;
}

.heart::after, /*Usamos los pseudoelementos*/
.heart::before{
    position: absolute;
    content: "";
    left: 5vw;
    top: 0;
    width: 5vw;
    height: 8vw;
    background-color: #a00;
    transform: rotate(-45deg);
    transform-origin: 0 100%;
    border-radius: 5vw 5vw 0 0;
    animation: heartColor 1s infinite;
}

.heart::after{
    left: 0;
    transform: rotate(45deg);
    transform-origin: 100% 100%;
}







