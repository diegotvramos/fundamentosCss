/*
Posicionamiento CSS

  La propiedades FLOAT y POSITION nos permiten modificar la posici칩n natural de cualquier elemento del documento HTML.


  

  El navegador coloca cada elemento teniendo en cuenta el orden en el que aparece en el documento y su tipo de visualizaci칩n dependiendo si es un elemento de l칤nea o de bloque.

  Con FLOAT y POSITION podemos modificar este comportamiento.

    imagina una fila para el banco, y uno empieza a flotar con un globo de helio. 游꼲

  Elementos Flotantes
    - float: Convierte un elemento en flotante desplaz치ndolo hasta la zona m치s a la izquierda o m치s a la derecha de la posici칩n en la que originalmente se encontraba.
    - clear: Limpia la flotaci칩n (left, right, both)

  Tipos de Posicionamiento:
    - static (default)
    - relative
    - absolute
    - fixed
    - sticky

  Para mover los elementos posicionados se activan las propiedades:
    - top (vertical - eje Y)
    - bottom (vertical - eje Y)
    - left (horizontal - eje X)
    - right (horizontal - eje X)
    - z-index (profundidad - eje Z)

  Las propiedades top y left van a tener preferencia por sobre bottom y right respectivamente.

  Est치s 5 propiedades no funcionan con el valor de static.
*/


/* static: Es el valor por defecto, significa que el elemento respeta el flujo del documento HTML, por lo que no se puede mover ni posicionar */


.static{
    background-color: yellow;
    position: static;/*es  el valor po defecto*/
    top: 10px;
    left: 10px;
}

/* relative: El elemento conserva sus dimensiones y posici칩n original(orden de llegada) en el
flujo del documento. Si se mueve toma como referencia su posici칩n original */

.relative {
    background-color: turquoise;
    position: relative;
    width: 300px;
    height: 50px;
    /*  top: 50px;
    left: 50px; */
    bottom: 50px;
    right: 50px;
    top: -30px;
    left: -10px;
    top: 300px; /*tiene preferencia sobre botton y right*/
    left: 50px; /*tiene preferencia sobre botton y right*/
  }

  /* absolute: El elemento pierde sus dimensiones y posici칩n original en el flujo del documento. Si se mueve puede tomar como referencia 2 elementos:
  1) El primer ancestro(pader) con posicionamiento relativo
  2) Si no encuentra un ancestro relativo, se mueve respecto del documento HTML */

  .absolute{
    background-color: tomato;
    position: absolute;
    width: 200px;
    height: 50px;
    /* top: 0;
    left: 0; */
    right: 0;
    bottom: 0;
    /*top: 0px;/*tienen preferencia sobre RIGHT Y BOTTOM*/
    /*left: 0px;*/
  }

  .relative-parent{
    background-color: khaki;
    position: relative;
    width: 600px;
    height: 50px;
    top: 50px;
    left: 50px;
  }

  .absolute-child{
    background-color: lightcoral;
    position: absolute;
    /* left: 0;
    top: 0; */
    /* bottom: 0;
    right: 0; */
    top: -50px;
    left: -30px;
  }

  /* 
  fixed: El elemento pierde sus dimensiones y posici칩n original en el flujo del documento. 
  Si se mueve toma como referencia el documento HTML y queda fijo en la posici칩n, cuando 
  el scroll se mueva, el elemento no lo har치, queda FIJO 
  */

.fixed{
  background-color: lightgreen;
  position: fixed;
  width: 300px;
  height: 50px;
  /* right: 20px;
  bottom: 20px; */
  top: 30px;
  left: 400px;
}


/* sticky: es un combinaci칩n de posicionamiento relative y fixed, para este posicionamiento las propiedades de top,
left, bottom y right no mueven el elemento, sirven como un punto de referencia, mientras no lleguen a ese valor 
el elemento se comporta como relative, cuando llega se convierte en fixed

Para que este comportamiento funcione el elemento sticky debe ser hijo directo del body o su elemento 
contenedor debe tener dimensiones definidas y s칩lo ser치 sticky dentro de las dimensiones de su contenedor padre. */

.sticky{
  background-color: lightblue;
  position: sticky;/*Tiene que ser hijo directo del body*/
  top: 50px;
}

.sticky-parent{
  border: thin dashed black;
  height: 600px; /*El contenedor padre debe tener contenedor definido con height o width*/
}

.sticky-child{
  background-color: lightslategray;
  position: sticky;
  top: 70px;
}

/* 
z-index: propiedad que permite controlar la profundidad de los elementos posicionados, 
su valor por defecto es auto, acepta n칰mero positivos, negativos y cero.

A mayor valor el elemento esta m치s al frente, a menor valor m치s al fondo.

Un elemento padre nunca podr치 estar sobre sus elementos hijos, sin embargo 
los elementos hijos si pueden d치ndoles un valor negativo y que el elemento 
padre no tenga definido valor de z-index 
 */


 .z-index-1,
 .z-index-2{
  background-color: mediumaquamarine;
  position: relative;/*Z-indez funciona a cualquier valor menos el est치tico.*/
  border: thin solid black;
  width: 200px;
  height: 200px;
 }

 .z-index-1{
  z-index: 1;
  z-index: -1;
 }

 .z-index-2{
  top: -200px;
  left: 100px;
  z-index: 2;
 }

 .z-index-parent{
  background-color: mediumorchid;
  width: 300px;
  height: 300px;
  position: relative;
  /*z-index: 2; /*es muy raro que un elemento que tiene mas cosas tenga que sobreponerse sobre sus hij@s*/
 }

 .z-index-child{
  background-color: mediumvioletred;
  position: relative;
  width: 150px;
  height: 150px;
  top: -75px;
  left: 75px;  
  z-index: -30;
}